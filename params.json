{"name":"Popular","tagline":"Friendship gem for Rails/ActiveRecord backed models","body":"# Popular\r\n[![Gem Version](https://badge.fury.io/rb/popular.png)](http://badge.fury.io/rb/popular)\r\n[![Build Status](https://travis-ci.org/thejchap/popular.svg?branch=master)](https://travis-ci.org/thejchap/popular)\r\n[![Code Climate](https://codeclimate.com/github/thejchap/popular.png)](https://codeclimate.com/github/thejchap/popular)\r\n[![Code Coverage](https://codeclimate.com/github/thejchap/popular/coverage.png)](https://codeclimate.com/github/thejchap/popular)\r\n[![Inline docs](http://inch-pages.github.io/github/thejchap/popular.png)](http://inch-pages.github.io/github/thejchap/popular)\r\n[![Dependency Status](https://gemnasium.com/thejchap/popular.svg)](https://gemnasium.com/thejchap/popular)\r\n\r\nPopular is a friendship gem designed for Rails/ActiveRecord models.\r\n\r\n- RubyGems: ( https://rubygems.org/gems/popular )\r\n- Website: ( http://thejchap.github.io/popular )\r\n- RDoc: ( http://rubydoc.info/github/thejchap/popular/master/frames )\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'popular'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install popular\r\n\r\n### Database Migration\r\n\r\nPopular uses a friendships table to store friendship relationships.\r\nTo get up and running, use the following command:\r\n\r\n    rails g popular:migration\r\n    rake db:migrate\r\n\r\n## Usage\r\n\r\n### Model\r\n\r\nTo get started using Popular, simply add `popular` to your model, (ie: `app/models/user.rb`)\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  popular\r\nend\r\n\r\n@sam = User.create name: \"Samuel\"\r\n@jackson = User.create name: \"Jackson\"\r\n\r\n# Adding and removing friends\r\n@sam.friends_with? @jackson         #=> false\r\n@sam.friended_by? @jackson          #=> false\r\n\r\n@sam.befriend @jackson\r\n@sam.friends_with? @jackson         #=> true\r\n\r\n@sam.unfriend @jackson\r\n@sam.friends_with? @jackson         #=> false\r\n\r\n@jackson.befriend @sam\r\n@sam.friended_by? @jackson          #=> true\r\n\r\n@sam.befriend @jackson\r\n@sam.mutual_friends_with? @jackson  #=> true\r\n```\r\n\r\n### Aliases\r\n\r\nIn Popular, `befriend` is synonomous with `follow`, so if it better fits the context of your application, you can use\r\nfollow methods/relations instead. For example:\r\n\r\n```ruby\r\n@sam.follow @jackson\r\n@sam.following? @jackson          #=> true\r\n\r\n@jackson.follow @sam\r\n@sam.followers.include? @jackson  #=> true\r\n```\r\n\r\n\r\n### Callbacks\r\n\r\nPopular provides callbacks that are fired around friendship creation. Available callbacks are:\r\n  - after_befriend\r\n  - before_befriend\r\n  - after_unfriend\r\n  - before_unfriend\r\n\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  popular\r\n  after_befriend :notify_friendship_created\r\n  after_unfriend :notify_unfriended\r\n\r\n  def notify_friendship_created\r\n    puts \"Friendship created successfully\"\r\n  end\r\n\r\n  def notify_unfriended\r\n    puts \":(\"\r\n  end\r\nend\r\n\r\n@justin = User.create name: \"Justin\"\r\n@jenny = User.create name: \"Jenny\"\r\n\r\n@justin.befriend @jenny #=> \"Friendship created successfully\"\r\n@justin.unfriend @jenny #=> \":(\"\r\n```\r\n\r\n### Customization\r\n\r\nPopular is intended to provide basic utilities around self-referential relationships in social apps.\r\nOften, more customization is necessary. If you would like to store more information around the friendship,\r\nPopular provides a hook to connect its `friendship` model to a user defined `friendship_profile` model. \r\nThis allows Popular to remain somewhat lightweight and factor out only the code that is repeated  alot between apps,\r\nwhile allowing flexibility where it is needed.\r\n\r\nDo to this, create a `FriendshipProfile` model that belongs to `friendship`, and has whatever custom attributes\r\nyou want\r\n\r\n```ruby\r\nrails g model FriendshipProfile friendship:belongs_to meeting_location:string meeting_latitude:float meeting_longitude:float\r\nrake db:migrate\r\n```\r\n\r\nThen, in your Popular model, just set the `friendship_profile` option to true:\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  popular friendship_profile: true\r\nend\r\n```\r\n\r\nNow, everytime a `friendship` is created, an accompanying `friendship_profile` will be attached to it, allowing you to define\r\nas many custom attributes as you wish in a separate table\r\n\r\n## Related gems\r\n\r\nIf Popular isn't quite what you're looking for, here are some other useful gems in the same category:\r\n\r\n- Amistad ( https://github.com/raw1z/amistad )\r\n- Friendable ( https://github.com/yuki24/friendable )\r\n\r\n*Disclaimer: I have not used either of the above gems*\r\n\r\n\r\n## Resources\r\n\r\nPopular was heavily inspired by this screencast: ( http://railscasts.com/episodes/163-self-referential-association?view=asciicast )\r\n\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it ( http://github.com/thejchap/popular/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"UA-49531567-1","note":"Don't delete this file! It's used internally to help with page regeneration."}